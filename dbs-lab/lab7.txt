Use a table StudentTable(RollNo, GPA) and populate the table with {(1, 5.8); (2, 
6.5); (3, 3.4); (4,7.8); (5, 9.5)} unless a different DB schema is explicitly specified.

1. Write a PL/SQL block to display the GPA of given student.


create table student (
	rollno numeric(3) primary key,
	gpa numeric(2,1)
);

insert into student values (1,5.8);
insert into student values (2,6.5);
insert into student values (3,3.4);
insert into student values (4,7.8);
insert into student values (5,9.5);

set serveroutput on
declare
tempRno numeric(3);
tempGpa numeric(2,1);

begin
	tempRno := '&RollNumber';
	dbms_output.put_line('Input student roll number is: '||tempRno);
	
	select gpa into tempGpa
	from student
	where rollno = tempRno;
	
	dbms_output.put_line('GPA of given student: '||tempGpa);
end;
/
---
Enter value for rollnumber: 2
old   6: tempRno := '&RollNumber';
new   6: tempRno := '2';
Input student roll number is: 2
GPA of given student: 6.5

PL/SQL procedure successfully completed.
	---
	
2. Write a PL/SQL block to display the letter grade(0-4: F; 4-5: E; 5-6: D; 6-7: C; 
7-8: B; 8-9: A; 9-10: A+} of given student.

set serveroutput on
declare
tempRno numeric(3);
tempGpa numeric(2,1);
tempgrade varchar(2);

begin
	tempRno := '&RollNumber';
	dbms_output.put_line('Input student roll number is: '||tempRno);
	
	select gpa into tempGpa
	from student
	where rollno = tempRno;
	
	IF tempGpa between 0 and 4 THEN tempgrade := 'F' ;
	ELSIF tempGpa between 4 and 5 THEN tempgrade := 'E';
	ELSIF tempGpa between 5 and 6 THEN tempgrade := 'D';
	ELSIF tempGpa between 6 and 7 THEN tempgrade := 'C';
	ELSIF tempGpa between 7 and 8 THEN tempgrade := 'B';
	ELSIF tempGpa between 8 and 9 THEN tempgrade := 'A';
	ELSIF tempGpa between 9 and 10 THEN tempgrade := 'A+';
	ELSE dbms_output.put_line('Invalid GPA');
	END IF;
	
	dbms_output.put_line('GPA of given student: '||tempGpa);
	dbms_output.put_line('Grade of given student: '||tempgrade);
end;
/
---
Enter value for rollnumber: 2
old   7: tempRno := '&RollNumber';
new   7: tempRno := '2';
Input student roll number is: 2
GPA of given student: 6.5
Grade of given student: C

PL/SQL procedure successfully completed.





3.Input the date of issue and date of return for a book. Calculate and display the fine 
with the appropriate message using a PL/SQL block. The fine is charged as per 
the table 8.1: 
set serveroutput on;
declare
bk_time numeric(3);
bk_fine numeric(4);
indate date;
outdate date;

begin
	indate := '&dateofissue';
	outdate := '&dateofreturn';
	bk_time := outdate - indate;
	
	dbms_output.put_line('Input period is: '||bk_time);
	
	IF bk_time between 0 and 7 THEN bk_fine := 0;
	ELSIF bk_time between 8 and 15 THEN bk_fine := 1*bk_time;
	ELSIF bk_time between 16 and 30 THEN bk_fine := 2*bk_time;
	ELSIF bk_time > 30 THEN bk_fine := 5*bk_time;
	END IF;
	
	dbms_output.put_line('Fine is: '||bk_fine);
end;
/
---
Enter value for dateofissue: 12 JAN 2021
old   8: indate := '&dateofissue';
new   8: indate := '12 JAN 2021';
Enter value for dateofreturn: 29 JAN 2021
old   9: outdate := '&dateofreturn';
new   9: outdate := '29 JAN 2021';
Input period is: 17
Fine is: 34

PL/SQL procedure successfully completed.




4.  Write a PL/SQL block to print the letter grade of all the students(RollNo: 1 - 5).

set serveroutput on
declare
tempGpa numeric(2,1);
tempgrade varchar(2);

begin
	FOR i in 1..5 LOOP
		
		select gpa into tempGpa
		from student
		where rollno = i;
	
		IF tempGpa between 0 and 4 THEN tempgrade := 'F' ;
		ELSIF tempGpa between 4 and 5 THEN tempgrade := 'E';
		ELSIF tempGpa between 5 and 6 THEN tempgrade := 'D';
		ELSIF tempGpa between 6 and 7 THEN tempgrade := 'C';
		ELSIF tempGpa between 7 and 8 THEN tempgrade := 'B';
		ELSIF tempGpa between 8 and 9 THEN tempgrade := 'A';
		ELSIF tempGpa between 9 and 10 THEN tempgrade := 'A+';
		ELSE dbms_output.put_line('Invalid GPA');
		END IF;
		
		dbms_output.put_line('RollNo: '||i);
		dbms_output.put_line('GPA of given student: '||tempGpa);
		dbms_output.put_line('Grade of given student: '||tempgrade);
		END LOOP;
end;
/
---
RollNo: 1
GPA of given student: 5.8
Grade of given student: D
RollNo: 2
GPA of given student: 6.5
Grade of given student: C
RollNo: 3
GPA of given student: 3.4
Grade of given student: F
RollNo: 4
GPA of given student: 7.8
Grade of given student: B
RollNo: 5
GPA of given student: 9.5
Grade of given student: A+

PL/SQL procedure successfully completed.


5. Alter StudentTable by appending an additional column LetterGrade Varchar2(2). 
Then write a PL/SQL block to update the table with letter grade of each student.

alter table student add lettergrade varchar(2);

set serveroutput on
declare
tempGpa numeric(2,1);
tempgrade varchar(2);

begin
	FOR i in 1..5 LOOP
		
		select gpa into tempGpa
		from student
		where rollno = i;
	
		IF tempGpa between 0 and 4 THEN tempgrade := 'F' ;
		ELSIF tempGpa between 4 and 5 THEN tempgrade := 'E';
		ELSIF tempGpa between 5 and 6 THEN tempgrade := 'D';
		ELSIF tempGpa between 6 and 7 THEN tempgrade := 'C';
		ELSIF tempGpa between 7 and 8 THEN tempgrade := 'B';
		ELSIF tempGpa between 8 and 9 THEN tempgrade := 'A';
		ELSIF tempGpa between 9 and 10 THEN tempgrade := 'A+';
		ELSE dbms_output.put_line('Invalid GPA');
		END IF;
		
		dbms_output.put_line('RollNo: '||i);
		dbms_output.put_line('GPA of given student: '||tempGpa);
		dbms_output.put_line('Grade of given student: '||tempgrade);
		
		update student set lettergrade = tempgrade where rollno = i;
		END LOOP;
end;
/


6. Write a PL/SQL block to find the student with max. GPA without using aggregate 
function.

set serveroutput on;
declare
max_gpa numeric(2,1);
temp_gpa numeric(2,1);

begin
	max_gpa := 0;
	FOR i in 1..5 LOOP
		select gpa into temp_gpa
		from student
		where rollno = i;
		
		IF temp_gpa > max_gpa THEN max_gpa := temp_gpa;
		END IF;
	END LOOP;
	
	dbms_output.put_line('Max GPA is: '||max_gpa);
	
end;
/
---
Max GPA is: 9.5

PL/SQL procedure successfully completed.


7. Implement lab exercise 4 using GOTO.

set serveroutput on
declare
  tempGpa number(2,1);
  tempgrade varchar2(2);
  i number := 1;
begin
  <<loopthing>>
  IF i = 5 THEN GOTO go_to_end;
	END IF;
  while i < 5 loop
    select gpa into tempGpa
    from student
    where rollno = i;
    
    select lettergrade into tempgrade
    from student
    where rollno = i;
    GOTO printname;
  end loop;
  
<<printname>>
    dbms_output.put_line('RollNo: '||i);
    dbms_output.put_line('GPA of given student: '||tempGpa);
    dbms_output.put_line('Grade of given student: '||tempgrade);
	i := i + 1;
	GOTO loopthing;
<<go_to_end>>
dbms_output.put_line('END');
end;
/
---
RollNo: 1
GPA of given student: 5.8
Grade of given student:
RollNo: 2
GPA of given student: 6.5
Grade of given student:
RollNo: 3
GPA of given student: 3.4
Grade of given student:
RollNo: 4
GPA of given student: 7.8
Grade of given student:
END

PL/SQL procedure successfully completed.


8.Based on the University database schema, write a PL/SQL block to display the 
details of the Instructor whose name is supplied by the user. Use exceptions to 
show appropriate error message for the following cases:
a. Multiple instructors with the same name
b. No instructor for the given name

a)

set serveroutput on;
declare
tempinst varchar2(5);
inst_name varchar2(20);
begin
	tempinst := '&InstructorID';
	dbms_output.put_line('Input is: '||tempinst);
	
	select name into inst_name
	from instructor
	where id = tempinst;
	
	EXCEPTION
		WHEN NO_DATA_FOUND THEN dbms_output.put_line('No such instructor!');
		WHEN TOO_MANY_ROWS THEN dbms_output.put_line('There are many inst by this name!');
	
end;
/

